/*
Java has 8 primitive data types; char, boolean, byte, short, int, long, float, and double. For this exercise, we'll work with the primitives used to hold integer values (byte, short, int, and long):

1. A byte is an 8-bit signed integer.
2. A short is a 16-bit signed integer.
3. An int is a 32-bit signed integer.
4. A long is a 64-bit signed integer.
Given an input integer, you must determine which primitive data types are capable of properly storing that input.

To get you started, a portion of the solution is provided for you in the editor.

Reference: https://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html

Input Format

The first line contains an integer, T, denoting the number of test cases.
Each test case, T, is comprised of a single line with an integer, n, which can be arbitrarily large or small.

Output Format

For each input variable n and appropriate primitive dataType, you must determine if the given primitives are capable of storing it. If yes, then print:

n can be fitted in:
* dataType
If there is more than one appropriate data type, print each one on its own line and order them by size (i.e.: 
byte < short < int < long).

If the number cannot be stored in one of the four aforementioned primitives, print the line:

n can't be fitted anywhere.
*/



import java.io.*;
import java.util.*;

public class Solution 
{

    public static void main(String[] args) 
    {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
        Scanner sc = new Scanner(System.in);
        int T = sc.nextInt();
        for(int i=0;i<T;i++)
        {
            try
            {
                long l = sc.nextLong();
                System.out.println(l+" can be fitted in:");
                if(l>=Byte.MIN_VALUE && l<=Byte.MAX_VALUE)
                {
                    System.out.println("* byte");
                }
                if(l>=Short.MIN_VALUE && l<=Short.MAX_VALUE)
                {
                    System.out.println("* short");
                }
                if(l>=Integer.MIN_VALUE && l<=Integer.MAX_VALUE)
                {
                    System.out.println("* int");
                }
                if(l>=Long.MIN_VALUE && l<=Long.MAX_VALUE)
                {
                    System.out.println("* long");
                }
            }
            catch(Exception e)
            {
                System.out.println(sc.next()+" can't be fitted anywhere.");
            }
        }
    }
}
